#include <Revo/System/Keyboard.hpp>

namespace rv
{
    int32_t Keyboard::GetKeyInternal(CodeType code)
    {
        switch (code)
        {
            case A:           return GLFW_KEY_A;
            case B:           return GLFW_KEY_B;
            case C:           return GLFW_KEY_C;
            case D:           return GLFW_KEY_D;
            case E:           return GLFW_KEY_E;
            case F:           return GLFW_KEY_F;
            case G:           return GLFW_KEY_G;
            case H:           return GLFW_KEY_H;
            case I:           return GLFW_KEY_I;
            case J:           return GLFW_KEY_J;
            case K:           return GLFW_KEY_K;
            case L:           return GLFW_KEY_L;
            case M:           return GLFW_KEY_M;
            case N:           return GLFW_KEY_N;
            case O:           return GLFW_KEY_O;
            case P:           return GLFW_KEY_P;
            case Q:           return GLFW_KEY_Q;
            case R:           return GLFW_KEY_R;
            case S:           return GLFW_KEY_S;
            case T:           return GLFW_KEY_T;
            case U:           return GLFW_KEY_U;
            case V:           return GLFW_KEY_V;
            case W:           return GLFW_KEY_W;
            case X:           return GLFW_KEY_X;
            case Y:           return GLFW_KEY_Y;
            case Z:           return GLFW_KEY_Z;
            case Num0:        return GLFW_KEY_0;
            case Num1:        return GLFW_KEY_1;
            case Num2:        return GLFW_KEY_2;
            case Num3:        return GLFW_KEY_3;
            case Num4:        return GLFW_KEY_4;
            case Num5:        return GLFW_KEY_5;
            case Num6:        return GLFW_KEY_6;
            case Num7:        return GLFW_KEY_7;
            case Num8:        return GLFW_KEY_8;
            case Num9:        return GLFW_KEY_9;
            case LControl:    return GLFW_KEY_LEFT_CONTROL;
            case LShift:      return GLFW_KEY_LEFT_SHIFT;
            case LAlt:        return GLFW_KEY_LEFT_ALT;
            case LSystem:     return GLFW_KEY_LEFT_SUPER;
            case RControl:    return GLFW_KEY_RIGHT_CONTROL;
            case RShift:      return GLFW_KEY_RIGHT_SHIFT;
            case RAlt:        return GLFW_KEY_RIGHT_ALT;
            case RSystem:     return GLFW_KEY_RIGHT_SUPER;
            case LBracket:    return GLFW_KEY_LEFT_BRACKET;
            case RBracket:    return GLFW_KEY_RIGHT_BRACKET;
            case Escape:      return GLFW_KEY_ESCAPE;
            case Tilde:       return GLFW_KEY_GRAVE_ACCENT;
            case Tab:         return GLFW_KEY_TAB;
            case Space:       return GLFW_KEY_SPACE;
            case Comma:       return GLFW_KEY_COMMA;
            case Period:      return GLFW_KEY_PERIOD;
            case Slash:       return GLFW_KEY_SLASH;
            case Semicolon:   return GLFW_KEY_SEMICOLON;
            case Quote:       return GLFW_KEY_APOSTROPHE;
            case Backslash:   return GLFW_KEY_BACKSLASH;
            case Dash:        return GLFW_KEY_MINUS;
            case Equal:       return GLFW_KEY_EQUAL;
            case Backspace:   return GLFW_KEY_BACKSPACE;
            case Return:      return GLFW_KEY_ENTER;
            case Menu:        return GLFW_KEY_MENU;
            case Insert:      return GLFW_KEY_INSERT;
            case Delete:      return GLFW_KEY_DELETE;
            case Home:        return GLFW_KEY_HOME;
            case End:         return GLFW_KEY_END;
            case PageUp:      return GLFW_KEY_PAGE_UP;
            case PageDown:    return GLFW_KEY_PAGE_DOWN;
            case PrintScreen: return GLFW_KEY_PRINT_SCREEN;
            case Pause:       return GLFW_KEY_PAUSE;
            case Left:        return GLFW_KEY_LEFT;
            case Right:       return GLFW_KEY_RIGHT;
            case Up:          return GLFW_KEY_UP;
            case Down:        return GLFW_KEY_DOWN;
            case KpNum0:      return GLFW_KEY_KP_0;
            case KpNum1:      return GLFW_KEY_KP_1;
            case KpNum2:      return GLFW_KEY_KP_2;
            case KpNum3:      return GLFW_KEY_KP_3;
            case KpNum4:      return GLFW_KEY_KP_4;
            case KpNum5:      return GLFW_KEY_KP_5;
            case KpNum6:      return GLFW_KEY_KP_6;
            case KpNum7:      return GLFW_KEY_KP_7;
            case KpNum8:      return GLFW_KEY_KP_8;
            case KpNum9:      return GLFW_KEY_KP_9;
            case KpDecimal:   return GLFW_KEY_KP_DECIMAL;
            case KpAdd:       return GLFW_KEY_KP_ADD;
            case KpSubtract:  return GLFW_KEY_KP_SUBTRACT;
            case KpMultiply:  return GLFW_KEY_KP_MULTIPLY;
            case KpDivide:    return GLFW_KEY_KP_DIVIDE;
            case KpEqual:     return GLFW_KEY_KP_EQUAL;
            case KpEnter:     return GLFW_KEY_KP_ENTER;
            case F1:          return GLFW_KEY_F1;
            case F2:          return GLFW_KEY_F2;
            case F3:          return GLFW_KEY_F3;
            case F4:          return GLFW_KEY_F4;
            case F5:          return GLFW_KEY_F5;
            case F6:          return GLFW_KEY_F6;
            case F7:          return GLFW_KEY_F7;
            case F8:          return GLFW_KEY_F8;
            case F9:          return GLFW_KEY_F9;
            case F10:         return GLFW_KEY_F10;
            case F11:         return GLFW_KEY_F11;
            case F12:         return GLFW_KEY_F12;
            case F13:         return GLFW_KEY_F13;
            case F14:         return GLFW_KEY_F14;
            case F15:         return GLFW_KEY_F15;
            case F16:         return GLFW_KEY_F16;
            case F17:         return GLFW_KEY_F17;
            case F18:         return GLFW_KEY_F18;
            case F19:         return GLFW_KEY_F19;
            case F20:         return GLFW_KEY_F20;
            case F21:         return GLFW_KEY_F21;
            case F22:         return GLFW_KEY_F22;
            case F23:         return GLFW_KEY_F23;
            case F24:         return GLFW_KEY_F24;
            case F25:         return GLFW_KEY_F25;
            case Count:       [[fallthrough]]
            case Unknown:     [[fallthrough]]
            default:          return GLFW_KEY_UNKNOWN;
        }
    }

    Keyboard::CodeType Keyboard::GetKeyFromInternal(int32_t internal)
    {
        switch (internal)
        {
            case GLFW_KEY_A:             return A;
            case GLFW_KEY_B:             return B;
            case GLFW_KEY_C:             return C;
            case GLFW_KEY_D:             return D;
            case GLFW_KEY_E:             return E;
            case GLFW_KEY_F:             return F;
            case GLFW_KEY_G:             return G;
            case GLFW_KEY_H:             return H;
            case GLFW_KEY_I:             return I;
            case GLFW_KEY_J:             return J;
            case GLFW_KEY_K:             return K;
            case GLFW_KEY_L:             return L;
            case GLFW_KEY_M:             return M;
            case GLFW_KEY_N:             return N;
            case GLFW_KEY_O:             return O;
            case GLFW_KEY_P:             return P;
            case GLFW_KEY_Q:             return Q;
            case GLFW_KEY_R:             return R;
            case GLFW_KEY_S:             return S;
            case GLFW_KEY_T:             return T;
            case GLFW_KEY_U:             return U;
            case GLFW_KEY_V:             return V;
            case GLFW_KEY_W:             return W;
            case GLFW_KEY_X:             return X;
            case GLFW_KEY_Y:             return Y;
            case GLFW_KEY_Z:             return Z;
            case GLFW_KEY_0:             return Num0;
            case GLFW_KEY_1:             return Num1;
            case GLFW_KEY_2:             return Num2;
            case GLFW_KEY_3:             return Num3;
            case GLFW_KEY_4:             return Num4;
            case GLFW_KEY_5:             return Num5;
            case GLFW_KEY_6:             return Num6;
            case GLFW_KEY_7:             return Num7;
            case GLFW_KEY_8:             return Num8;
            case GLFW_KEY_9:             return Num9;
            case GLFW_KEY_LEFT_CONTROL:  return LControl;
            case GLFW_KEY_LEFT_SHIFT:    return LShift;
            case GLFW_KEY_LEFT_ALT:      return LAlt;
            case GLFW_KEY_LEFT_SUPER:    return LSystem;
            case GLFW_KEY_RIGHT_CONTROL: return RControl;
            case GLFW_KEY_RIGHT_SHIFT:   return RShift;
            case GLFW_KEY_RIGHT_ALT:     return RAlt;
            case GLFW_KEY_RIGHT_SUPER:   return RSystem;
            case GLFW_KEY_LEFT_BRACKET:  return LBracket;
            case GLFW_KEY_RIGHT_BRACKET: return RBracket;
            case GLFW_KEY_ESCAPE:        return Escape;
            case GLFW_KEY_GRAVE_ACCENT:  return Tilde;
            case GLFW_KEY_TAB:           return Tab;
            case GLFW_KEY_SPACE:         return Space;
            case GLFW_KEY_COMMA:         return Comma;
            case GLFW_KEY_PERIOD:        return Period;
            case GLFW_KEY_SLASH:         return Slash;
            case GLFW_KEY_SEMICOLON:     return Semicolon;
            case GLFW_KEY_APOSTROPHE:    return Quote;
            case GLFW_KEY_BACKSLASH:     return Backslash;
            case GLFW_KEY_MINUS:         return Dash;
            case GLFW_KEY_EQUAL:         return Equal;
            case GLFW_KEY_BACKSPACE:     return Backspace;
            case GLFW_KEY_ENTER:         return Return;
            case GLFW_KEY_MENU:          return Menu;
            case GLFW_KEY_INSERT:        return Insert;
            case GLFW_KEY_DELETE:        return Delete;
            case GLFW_KEY_HOME:          return Home;
            case GLFW_KEY_END:           return End;
            case GLFW_KEY_PAGE_UP:       return PageUp;
            case GLFW_KEY_PAGE_DOWN:     return PageDown;
            case GLFW_KEY_PRINT_SCREEN:  return PrintScreen;
            case GLFW_KEY_PAUSE:         return Pause;
            case GLFW_KEY_LEFT:          return Left;
            case GLFW_KEY_RIGHT:         return Right;
            case GLFW_KEY_UP:            return Up;
            case GLFW_KEY_DOWN:          return Down;
            case GLFW_KEY_KP_0:          return KpNum0;
            case GLFW_KEY_KP_1:          return KpNum1;
            case GLFW_KEY_KP_2:          return KpNum2;
            case GLFW_KEY_KP_3:          return KpNum3;
            case GLFW_KEY_KP_4:          return KpNum4;
            case GLFW_KEY_KP_5:          return KpNum5;
            case GLFW_KEY_KP_6:          return KpNum6;
            case GLFW_KEY_KP_7:          return KpNum7;
            case GLFW_KEY_KP_8:          return KpNum8;
            case GLFW_KEY_KP_9:          return KpNum9;
            case GLFW_KEY_KP_DECIMAL:    return KpDecimal;
            case GLFW_KEY_KP_ADD:        return KpAdd;
            case GLFW_KEY_KP_SUBTRACT:   return KpSubtract;
            case GLFW_KEY_KP_MULTIPLY:   return KpMultiply;
            case GLFW_KEY_KP_DIVIDE:     return KpDivide;
            case GLFW_KEY_KP_EQUAL:      return KpEqual;
            case GLFW_KEY_KP_ENTER:      return KpEnter;
            case GLFW_KEY_F1:            return F1;
            case GLFW_KEY_F2:            return F2;
            case GLFW_KEY_F3:            return F3;
            case GLFW_KEY_F4:            return F4;
            case GLFW_KEY_F5:            return F5;
            case GLFW_KEY_F6:            return F6;
            case GLFW_KEY_F7:            return F7;
            case GLFW_KEY_F8:            return F8;
            case GLFW_KEY_F9:            return F9;
            case GLFW_KEY_F10:           return F10;
            case GLFW_KEY_F11:           return F11;
            case GLFW_KEY_F12:           return F12;
            case GLFW_KEY_F13:           return F13;
            case GLFW_KEY_F14:           return F14;
            case GLFW_KEY_F15:           return F15;
            case GLFW_KEY_F16:           return F16;
            case GLFW_KEY_F17:           return F17;
            case GLFW_KEY_F18:           return F18;
            case GLFW_KEY_F19:           return F19;
            case GLFW_KEY_F20:           return F20;
            case GLFW_KEY_F21:           return F21;
            case GLFW_KEY_F22:           return F22;
            case GLFW_KEY_F23:           return F23;
            case GLFW_KEY_F24:           return F24;
            case GLFW_KEY_F25:           return F25;
            case GLFW_KEY_UNKNOWN:       [[fallthrough]]
            default:                     return Unknown;
        }
    }

    const char* Keyboard::GetKeyName(CodeType code)
    {
        switch (code)
        {
            case A:           return "A";
            case B:           return "B";
            case C:           return "C";
            case D:           return "D";
            case E:           return "E";
            case F:           return "F";
            case G:           return "G";
            case H:           return "H";
            case I:           return "I";
            case J:           return "J";
            case K:           return "K";
            case L:           return "L";
            case M:           return "M";
            case N:           return "N";
            case O:           return "O";
            case P:           return "P";
            case Q:           return "Q";
            case R:           return "R";
            case S:           return "S";
            case T:           return "T";
            case U:           return "U";
            case V:           return "V";
            case W:           return "W";
            case X:           return "X";
            case Y:           return "Y";
            case Z:           return "Z";
            case Num0:        return "Num0";
            case Num1:        return "Num1";
            case Num2:        return "Num2";
            case Num3:        return "Num3";
            case Num4:        return "Num4";
            case Num5:        return "Num5";
            case Num6:        return "Num6";
            case Num7:        return "Num7";
            case Num8:        return "Num8";
            case Num9:        return "Num9";
            case LControl:    return "LControl";
            case LShift:      return "LShift";
            case LAlt:        return "LAlt";
            case LSystem:     return "LSystem";
            case RControl:    return "RControl";
            case RShift:      return "RShift";
            case RAlt:        return "RAlt";
            case RSystem:     return "RSystem";
            case LBracket:    return "LBracket";
            case RBracket:    return "RBracket";
            case Escape:      return "Escape";
            case Tilde:       return "Tilde";
            case Tab:         return "Tab";
            case Space:       return "Space";
            case Comma:       return "Comma";
            case Period:      return "Period";
            case Slash:       return "Slash";
            case Semicolon:   return "Semicolon";
            case Quote:       return "Quote";
            case Backslash:   return "Backslash";
            case Dash:        return "Dash";
            case Equal:       return "Equal";
            case Backspace:   return "Backspace";
            case Return:      return "Return";
            case Menu:        return "Menu";
            case Insert:      return "Insert";
            case Delete:      return "Delete";
            case Home:        return "Home";
            case End:         return "End";
            case PageUp:      return "PageUp";
            case PageDown:    return "PageDown";
            case PrintScreen: return "PrintScreen";
            case Pause:       return "Pause";
            case Left:        return "Left";
            case Right:       return "Right";
            case Up:          return "Up";
            case Down:        return "Down";
            case KpNum0:      return "KpNum0";
            case KpNum1:      return "KpNum1";
            case KpNum2:      return "KpNum2";
            case KpNum3:      return "KpNum3";
            case KpNum4:      return "KpNum4";
            case KpNum5:      return "KpNum5";
            case KpNum6:      return "KpNum6";
            case KpNum7:      return "KpNum7";
            case KpNum8:      return "KpNum8";
            case KpNum9:      return "KpNum9";
            case KpDecimal:   return "KpDecimal";
            case KpAdd:       return "KpAdd";
            case KpSubtract:  return "KpSubtract";
            case KpMultiply:  return "KpMultiply";
            case KpDivide:    return "KpDivide";
            case KpEqual:     return "KpEqual";
            case KpEnter:     return "KpEnter";
            case F1:          return "F1";
            case F2:          return "F2";
            case F3:          return "F3";
            case F4:          return "F4";
            case F5:          return "F5";
            case F6:          return "F6";
            case F7:          return "F7";
            case F8:          return "F8";
            case F9:          return "F9";
            case F10:         return "F10";
            case F11:         return "F11";
            case F12:         return "F12";
            case F13:         return "F13";
            case F14:         return "F14";
            case F15:         return "F15";
            case F16:         return "F16";
            case F17:         return "F17";
            case F18:         return "F18";
            case F19:         return "F19";
            case F20:         return "F20";
            case F21:         return "F21";
            case F22:         return "F22";
            case F23:         return "F23";
            case F24:         return "F24";
            case F25:         return "F25";
            case Count:       [[fallthrough]]
            case Unknown:     [[fallthrough]]
            default:          return "[ Unknown ]";
        }
    }

    const char* Keyboard::GetKeyName(int32_t internal)
    {
        return GetKeyName(GetKeyFromInternal(internal));
    }
}
